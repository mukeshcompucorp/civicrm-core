<?php

/**
 * @file
 * Code for the TPG Global.
 */

/**
 * Implements hook_node_view_alter().
 */
function tpg_global_node_view_alter(&$build) {

  // Adding read more to Linked Entity nodes.
  if ($build['#view_mode'] == 'overview') {
    $node = $build['#node'];
    unset($node->title);

    $links=array();
    $links['node-readmore'] = array(
      'title' => t('> read more'),
      'href' => '/node/' . $node->nid,
      'html' => TRUE,
      'attributes' => array('rel' => 'tag', 'class' => array('entity-read-more')),
    );
    // Assign links
    $build['links']['node']['#links'] = $links;
  }
}

/**
 * Implements hook_node_view().
 */
function tpg_global_node_view($node, $view_mode, $langcode) {

  // Altering the Overview view mode content.
  if ($view_mode == 'overview') {

    $paragraphs_content = array();
    switch ($node->type) {
      case 'events_detail':
        $paragraphs_content = &$node->content['field_paragraphs_entity'];
        break;
      case 'paragraphs_page':
        $paragraphs_content = &$node->content['field_paragraphs_content'];
        break;
    }
    foreach ($paragraphs_content as $key => $value) {
      if (is_int($key)) {
        // Fetching the key of the paragraphs item.
        $item_key = key($value['entity']['paragraphs_item']);

        // Altering title and overview image field for title_section paragraph bundle.
        if ($value['entity']['paragraphs_item'][$item_key]['#bundle'] == 'title_section') {

          // Adding link to node page for title field.
          $title_markup = &$paragraphs_content[$key]['entity']['paragraphs_item'][$item_key]['field_paragraph_title'][0]['#markup'];
          $title_markup = l($title_markup, '/node/' . $node->nid);

          // Adding image path.
          $paragraphs_content[$key]['entity']['paragraphs_item'][$item_key]['field_paragraphs_overview_image'][0]['#path']['path'] = '/node/' . $node->nid;
        }
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function tpg_global_views_query_alter(&$view, &$query) {
}

/**
 * Implements hook_views_pre_render().
 */
function tpg_global_views_pre_render(&$view) {

  // Related Activities view alter.
  if ($view->name == 'related_activities' && ($view->current_display == 'related_activities_block' || $view->current_display == 'event_related_activities')) {
    $related_nodes = array();
    $node = menu_get_object('node');

    $paragraphs_content = $node->field_paragraphs_content['und'];
    if ($view->current_display == 'event_related_activities') {
      $paragraphs_content = $node->field_events_related_activities['und'];
    }

    foreach ($paragraphs_content as $key => $paragraph_item) {
      // Loading paragraphs bundle from automated id.
      $data = paragraphs_item_load($paragraph_item['value']);
      // Fetching Related Activities node nids.
      if ($data->bundle == 'related_activities') {
        foreach ($data->field_related_activities['und'] as $key => $related_activities) {

          // Getting only the targeted id values all others unsetting from view result.
          foreach ($view->result as $view_key => $view_value) {
            if ($view_value->nid == $related_activities['target_id']) {
              $related_nodes[] = $view_value;
            }
          }
        }
      }
    }
    if ($related_nodes) {
      $view->result = $related_nodes;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function tpg_global_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'paragraphs_page_node_form') {
    // Adding homepage weight options.
    _tpg_global_homepage_weight_range($form);

    // Hiding Event type and Event date fields.
    foreach ($form['field_paragraphs_content']['und'] as $key => $value) {
      if (is_int($key)) {
        if ($value['#bundle'] == 'title_section') {
          unset($form['field_paragraphs_content']['und'][$key]['field_paragraphs_event_type']);
          unset($form['field_paragraphs_content']['und'][$key]['field_event_dates']);
        }
      }
    }
  }

  if ($form_id == 'events_detail_node_form') {
    // Hiding Page Type field.
    foreach ($form['field_paragraphs_entity']['und'] as $key => $value) {
      if (is_int($key)) {
        if ($value['#bundle'] == 'title_section') {
          unset($form['field_paragraphs_entity']['und'][$key]['field_paragraphs_type']);
        }
      }
    }
    // Adding homepage weight options.
    _tpg_global_homepage_weight_range($form);
  }

  // Adding Date Range and Altering Location Proximity Search for Events Map.
  if ($form_id == 'views_exposed_form' && ($form_state['view']->name == 'whats_on') && ( $form_state['view']->current_display == 'now_upcoming_view_page')) {
    // Added Date range.
    $form['date_range'] = array(
      '#type' => 'daterangepicker',
      '#DateRangePicker_options' => array(
        'initial_text' => t('WHEN'),
        'apply_button_text' => t('SEARCH'),
        'clear_button_text' => t('CLEAR'),
        'cancel_button_text' => t('CANCEL'),
        'range_splitter' => ' - ',
        'date_format' => 'd M, yy',
        // This needs to be a format recognised by javascript Date.parse method.
        'alt_format' => 'yy-mm-dd',
        'date_picker_options' => array (
          'numberOfMonths' => 2,
         ),
      ),
    );
    $form['submit']['#weight'] = 5;
  }
}

/**
 * Adding range of weights for Homepage weight field.
 *
 * @param $form array
 *    Content type form array.
 */
function _tpg_global_homepage_weight_range(&$form = array()) {

  $range = array();
  for ($i = -20; $i <= 20; ++$i) {
    $range[$i] = $i;
  }
  $form['field_homepage_weight']['und']['#options'] = $range;
  $form['field_homepage_weight']['und']['#default_value'] = $form['#node']->field_homepage_weight['und'][0] ? $form['#node']->field_homepage_weight['und'][0] : 0;
}
