<?php

/**
 * @file
 * Code for the TPG Global.
 */

/**
 * Implements hook_node_view_alter().
 */
function tpg_global_node_view_alter(&$build) {

  // Hiding node title for overview view mode.
  if ($build['#view_mode'] == 'overview') {
    $node = $build['#node'];
    unset($node->title);
  }
}

/**
 * Implements hook_node_view().
 */
function tpg_global_node_view($node, $view_mode, $langcode) {

  // Altering the Overview view mode content.
  if ($view_mode == 'overview') {
    $paragraphs_content = array();
    switch ($node->type) {
      case 'events_detail':
        $paragraphs_content = &$node->content['field_paragraphs_entity'];
        break;
      case 'paragraphs_page':
        $paragraphs_content = &$node->content['field_paragraphs_content'];
        break;
    }
    foreach ($paragraphs_content as $key => $value) {
      if (is_int($key)) {
        // Fetching the key of the paragraphs item.
        $item_key = key($value['entity']['paragraphs_item']);

        // Altering title and overview image field for title_section paragraph bundle.
        if ($value['entity']['paragraphs_item'][$item_key]['#bundle'] == 'title_section') {

          // Adding link to node page for title field.
          $title_markup = &$paragraphs_content[$key]['entity']['paragraphs_item'][$item_key]['field_paragraph_title'][0]['#markup'];
          $title_markup = l($title_markup, drupal_get_path_alias('node/' . $node->nid));

          // Adding image path.
          $paragraphs_content[$key]['entity']['paragraphs_item'][$item_key]['field_paragraphs_overview_image'][0]['#path']['path'] = drupal_get_path_alias('node/' . $node->nid);

          // Remove Event Start End Date display suite code field for Paragraphs page node.
          if ($node->type == 'paragraphs_page') {
            unset($paragraphs_content[$key]['entity']['paragraphs_item'][$item_key]['event_start_end_dates']);
          }
        }
      }
    }
  }

  // Altering the image path for External Link Card Image field.
  if ($node->type == 'external_links' && $view_mode == 'overview') {
    if ($node->content['field_card_image']) {
      $node->content['field_card_image'][0]['#path']['path'] = $node->content['field_external_link_title'][0]['#element']['url'];
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function tpg_global_views_query_alter(&$view, &$query) {

  // Whats on query alter.
  if ($view->name == 'whats_on' && in_array($view->current_display, array('now_upcoming_view_page'))) {
    if (!$view->exposed_input['range']) {
      unset($query->where[2]);
    }
    else {
      $range_values = json_decode($view->exposed_input['range']);
      $query->where[2]['conditions'][0]['value'][':field_data_field_event_dates_field_event_dates_value'] = $range_values->start;
      $query->where[2]['conditions'][1]['value'][':field_data_field_event_dates_field_event_dates_value2'] = $range_values->end;
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function tpg_global_views_pre_render(&$view) {

  // Related Activities view alter.
  if ($view->name == 'related_activities' && ($view->current_display == 'related_activities_block' || $view->current_display == 'event_related_activities')) {
    $related_nodes = array();
    $node = menu_get_object('node');

    $paragraphs_content = $node->field_paragraphs_content['und'];
    if ($view->current_display == 'event_related_activities') {
      $paragraphs_content = $node->field_events_related_activities['und'];
    }

    foreach ($paragraphs_content as $key => $paragraph_item) {
      // Loading paragraphs bundle from automated id.
      $data = paragraphs_item_load($paragraph_item['value']);
      // Fetching Related Activities node nids.
      if ($data->bundle == 'related_activities') {
        foreach ($data->field_related_activities['und'] as $key => $related_activities) {

          // Getting only the targeted id values all others unsetting from view result.
          foreach ($view->result as $view_key => $view_value) {
            if ($view_value->nid == $related_activities['target_id']) {
              $related_nodes[] = $view_value;
            }
          }
        }
      }
    }
    $view->result = $related_nodes;
  }
}

/**
 * Implements hook_form_alter().
 */
function tpg_global_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'paragraphs_page_node_form') {
    // Adding homepage weight options.
    _tpg_global_homepage_weight_range($form);

    // Hiding Event type and Event date fields.
    foreach ($form['field_paragraphs_content']['und'] as $key => $value) {
      if (is_int($key)) {
        if ($value['#bundle'] == 'title_section') {
          unset($form['field_paragraphs_content']['und'][$key]['field_paragraphs_event_type']);
          unset($form['field_paragraphs_content']['und'][$key]['field_event_dates']);
        }
      }
    }
  }

  if ($form_id == 'events_detail_node_form') {
    // Hiding Page Type field.
    foreach ($form['field_paragraphs_entity']['und'] as $key => $value) {
      if (is_int($key)) {
        if ($value['#bundle'] == 'title_section') {
          unset($form['field_paragraphs_entity']['und'][$key]['field_paragraphs_type']);
        }
      }
    }
    // Adding homepage weight options.
    _tpg_global_homepage_weight_range($form);
  }

  // Overview node form alter.
  if ($form_id == 'overview_page_node_form') {
    // Altering the Field collection overview section.
    foreach ($form['field_overview_section']['und'] as $key => $value) {
      if (is_int($key)) {
        $form['field_overview_section']['und'][$key]['field_links']['und']['form']['field_external_link_title']['und'][0]['#title_display'] = 'invisible';
        $form['field_overview_section']['und'][$key]['field_links']['und']['form']['status']['#access'] = FALSE;

        // Altering the Inline entity form action buttons.
        $form['field_overview_section']['und'][$key]['field_links']['und']['actions']['ief_add']['#value'] = t('use new');
        $form['field_overview_section']['und'][$key]['field_links']['und']['actions']['ief_add_existing']['#value'] = t('use existing');
      }
    }
  }

  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'whats_on') {

    // Adding Date Range picker for News and Upcoming view filter.
    if ($form_state['view']->current_display == 'now_upcoming_view_page') {
      $form['combine'] = array(
        '#type' => 'daterangepicker',
        '#DateRangePicker_options' => array(
          'initial_text' => t('ANYTIME'),
          'apply_button_text' => t('SEARCH'),
          'clear_button_text' => t('CLEAR'),
          'cancel_button_text' => t('CANCEL'),
          'range_splitter' => ' - ',
          'date_format' => 'd M, yy',
          // This needs to be a format recognised by javascript Date.parse method.
          'alt_format' => 'yy-mm-dd',
          'date_picker_options' => array (
            'numberOfMonths' => 2,
           ),
        ),
      );
    }
    if ($form_state['view']->current_display == 'now_upcoming_view_page' || $form_state['view']->current_display == 'past_programme_view_page') {

      $form['submit']['#weight'] = 5;
      // Altering the filter select options.
      $form['field_paragraphs_event_type_tid']['#options']['All'] = t('EVERYTHING');
      $form['tid']['#prefix'] = '<div class="who-select-prefix">' . t('ALL ARTISTS') . '</div>';
      $form['tid']['#attributes']['placeholder'] = t('SEARCH BY NAME');

      if ($form['field_event_for_tid']) {
        $form['field_event_for_tid']['#options']['All'] = t('EVERYONE');
      }
    }
  }
}

/**
 * Adding range of weights for Homepage weight field.
 *
 * @param $form array
 *    Content type form array.
 */
function _tpg_global_homepage_weight_range(&$form = array()) {

  $range = array();
  for ($i = -20; $i <= 20; ++$i) {
    $range[$i] = $i;
  }
  $form['field_homepage_weight']['und']['#options'] = $range;
  $form['field_homepage_weight']['und']['#default_value'] = $form['#node']->field_homepage_weight['und'][0] ? $form['#node']->field_homepage_weight['und'][0] : 0;

  // Whats on weight for event details content type.
  if ($form['field_whats_on_weight']) {
    $form['field_whats_on_weight']['und']['#options'] = $range;
    $form['field_whats_on_weight']['und']['#default_value'] = $form['#node']->field_whats_on_weight['und'][0] ? $form['#node']->field_whats_on_weight['und'][0] : 0;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *    User Login Form alter.
 */
function tpg_global_form_user_login_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#suffix'] = l('<div class="user-forgot-password-link"> >' . t('forgot password?') . '</div>', 'user/password', array('html' => TRUE));
  $form['name']['#title'] = t('Name or email');
  unset($form['name']['#description']);
  unset($form['pass']['#description']);
  $form['actions']['submit']['#value'] = t('Login');
  $form['actions']['#weight'] = 2;
}

/**
 * Implements hook_block_info().
 */
function tpg_global_block_info() {
  $blocks = array();
  $blocks['create_account'] = array(
    'info' => t('Create an account'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tpg_global_block_view($delta='') {
  $block = array();

  switch($delta) {
    case 'create_account' :
      $block['content'] = drupal_render(drupal_get_form('create_account_form'));
      break;
  }
  return $block;
}

/**
 * Drupal form showing User Resigter Form.
 * @return
 *   returns form element.
 */
function create_account_form($form, $form_state) {

  // Fetching block id from block machine name.
  $block_id = '';
  if (module_exists('fe_block')) {
    $query = db_select('fe_block_boxes', 'fe_b')
            ->fields('fe_b', array('bid'))
            ->condition('fe_b.machine_name', 'user_login_create_account_intro');
    $block_id = $query->execute()->fetchField();
  }
  // Adding Create an account intro text.
  if ($block_id) {
    $create_account_intro_block_view = module_invoke('block', 'block_view', $block_id);
    $form['user_register_intro_block'] = array(
      '#type' => 'item',
      '#title' => t('Create an account'),
      '#markup' => render($create_account_intro_block_view['content']), //render($yoti_block_view['content']),
      '#weight' => 3,
    );
  }
  // Adding User Register form.
  $form['user_register'] = array(
    '#type' => 'item',
    '#markup' => drupal_render(drupal_get_form('user_register_form')),
    '#weight' => 4,
  );
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *    User Register Form alter.
 */
function tpg_global_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['account']['name']['#title'] = t('Name');
  unset($form['account']['name']['#description']);
  unset($form['account']['mail']['#description']);
  unset($form['account']['pass']['#description']);
  $form['actions']['submit']['#value'] = t('Create an account');
}

/**
 * Implements hook_menu_alter().
 */
function tpg_global_menu_alter(&$items) {
  $items['user']['title callback'] = '_tpg_global_user_menu_title';
}

/**
 * Menu item title callback for the 'user' path.
 *
 * Anonymous users shouldn't see anything, but authenticated users are
 * expected to see "My account".
 */
function _tpg_global_user_menu_title() {
  return user_is_logged_in() ? t('My account') : t('');
}
