<?php

/**
 * @file
 * Provides configurable Webform values set triggering on specific field.
 */

define('WEBFORM_VALUES_SET_MENU_PATH', 'admin/config/system/webform_values_set');

/**
 * Implements hook_menu().
 */
function webform_values_set_menu() {
  $items = array();

  $items[WEBFORM_VALUES_SET_MENU_PATH] = array(
    'title' => 'Webform Values Set',
    'description' => 'Configuration of Webform Values Set.',
    'page callback' => 'webform_values_set_list_page',
    'page arguments' => array(),
    'access arguments' => array('access webform values set'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items[WEBFORM_VALUES_SET_MENU_PATH . '/add'] = array(
    'title' => 'Add new Webform Values Set',
    'page callback' => 'webform_values_set_edit_page',
    'page arguments' => array(),
    'access arguments' => array('access webform values set'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items[WEBFORM_VALUES_SET_MENU_PATH . '/%/edit'] = array(
    'title' => 'Edit Webform Values Set',
    'page callback' => 'webform_values_set_edit_page',
    'page arguments' => array(4),
    'access arguments' => array('access webform values set'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items[WEBFORM_VALUES_SET_MENU_PATH . '/%/delete'] = array(
    'title' => 'Delete Webform Values Set',
    'page callback' => 'webform_values_set_delete_page',
    'page arguments' => array(4),
    'access arguments' => array('access webform values set'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items[WEBFORM_VALUES_SET_MENU_PATH . '/%/pair/add'] = array(
    'title' => 'Add new Webform Values Set Pair',
    'page callback' => 'webform_values_set_pair_edit_page',
    'page arguments' => array(4),
    'access arguments' => array('access webform values set'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items[WEBFORM_VALUES_SET_MENU_PATH . '/%/pair/%/edit'] = array(
    'title' => 'Edit Webform Values Set Pair',
    'page callback' => 'webform_values_set_pair_edit_page',
    'page arguments' => array(4, 6),
    'access arguments' => array('access webform values set'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items[WEBFORM_VALUES_SET_MENU_PATH . '/%/pair/%/delete'] = array(
    'title' => 'Delete Webform Values Set Pair',
    'page callback' => 'webform_values_set_pair_delete_page',
    'page arguments' => array(4, 6),
    'access arguments' => array('access webform values set'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function webform_values_set_permission() {
  return array(
    'access webform values set' => array(
      'title' => t('Access Webform Values Set'),
      'description' => t('Access the Webform Values Set admin section.'),
    ),
  );
}

/**
 * Include views .inc files as necessary.
 */
function webform_values_set_include() {
  static $used = array();
  foreach (func_get_args() as $file) {
    if (!isset($used[$file])) {
      require_once webform_values_set_include_path($file);
    }
    $used[$file] = TRUE;
  }
}

/**
 * Include views .inc files as necessary.
 */
function webform_values_set_include_path($file) {
  return DRUPAL_ROOT . '/' . drupal_get_path('module', 'webform_values_set') . "/includes/$file.inc";
}

/**
 * Webform Values Set list page.
 */
function webform_values_set_list_page() {
    webform_values_set_include('webform_values_set');
    $items = _webform_values_set_get_data();
    $out = _webform_values_set_list($items);
    $out .= l(t('add'), WEBFORM_VALUES_SET_MENU_PATH . '/add');
    return $out;
}

/**
 * Webform Values Set edit page.
 */
function webform_values_set_edit_page($id = null) {
    webform_values_set_include('webform_values_set');
    $item = null;
    if ($id) {
        $item = _webform_values_set_get_data($id);
    }
    $out = array();
    $out[] = drupal_get_form('webform_values_set_edit_form', $item);
    return $out;
}

/**
 * Webform Values Set form.
 */
function webform_values_set_edit_form($form, &$form_state, $item = null) {
  drupal_add_js(drupal_get_path('module', 'webform_values_set') .'/webform_values_set_admin.js');
  
  $fields = array('id', 'name', 'form_applied_id', 'trigger_field', 'value_a_field', 'value_b_field', 'is_secure');
  
  $form = array();
  if (!empty($form_state['input'])) {
      foreach ($fields as $field) {
          $itemValues[$field] = isset($form_state['input'][$field]) ? $form_state['input'][$field] : null;
      }
  } else {
      foreach ($fields as $field) {
          $itemValues[$field] = isset($item->{$field}) ? $item->{$field} : null;
      }
  }
  
  webform_values_set_include('webforms', 'webform_values_set_pairs');
  $webforms = _webform_values_set_webforms_get_webforms();
  $webformsFields = _webform_values_set_webforms_get_webforms_fields($webforms);
  
  $pairsOut = null;
  
  if (!empty($webforms)) {
    if ($itemValues['id']) {
      $pairs = _webform_values_set_pairs_get_data($itemValues['id']);
      $pairsOut = _webform_values_set_pairs_list($pairs);
    }

    $form['webform_values_set_edit'] = array(
      "#title" => t("Webform Values Set"),
      "#collapsible" => FALSE,
      "#collapsed" => FALSE,
      "#tree" => FALSE,
    );

    if (!empty($itemValues['id'])) {
      $form['webform_values_set_edit']['id'] = array(
        '#type' => 'hidden',
        '#default_value' => $itemValues['id'],
      );
    }

    $form['webform_values_set_edit']['name'] = array(
      '#type' => 'textfield',
      "#title" => t("Value Set Name"),
      '#required' => true,
      '#default_value' => $itemValues['name'],
    );

    if ($item) {
      $form['webform_values_set_edit']['value_pair_list'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="clearblock webform-values_set-pair-list">' . $pairsOut . '</div>',
        "#prefix" => '<label>' . t("Value Pair List") . '</label>',
        '#suffix' => l(t('add'), WEBFORM_VALUES_SET_MENU_PATH . '/' . $itemValues['id'] . '/pair/add'),
      );
    }

    $form['webform_values_set_edit']['form_applied_id'] = array(
      '#type' => 'select',
      "#title" => t("Form Applied"),
      '#required' => true,
      '#options' => $webforms,
      '#default_value' => $itemValues['form_applied_id'],
      '#prefix' => '<div class="webform-values-set-webform-select">',
      '#suffix' => '</div>',
      '#after_build' => array('_webform_values_set_remove_empty_select'),
    );

    $form['webform_values_set_edit']['trigger_field'] = array(
      '#type' => 'select',
      "#title" => t("Trigger Field"),
      '#required' => true,
      '#options' => reset($webformsFields),//array(),
      '#default_value' => $itemValues['trigger_field'],
      '#prefix' => '<div class="webform-values-set-trigger-field-select">',
      '#suffix' => '</div>',
      '#after_build' => array('_webform_values_set_set_none'),
    );

    $form['webform_values_set_edit']['value_a_field'] = array(
      '#type' => 'select',
      "#title" => t("Value A Field"),
      '#required' => true,
      '#options' => reset($webformsFields),//array(),
      '#default_value' => $itemValues['value_a_field'],
      '#prefix' => '<div class="webform-values-set-value-a-field-select">',
      '#suffix' => '</div>',
      '#after_build' => array('_webform_values_set_set_none'),
    );

    $form['webform_values_set_edit']['value_b_field'] = array(
      '#type' => 'select',
      "#title" => t("Value B Field"),
      '#options' => reset($webformsFields),//array(),
      '#default_value' => $itemValues['value_b_field'],
      '#prefix' => '<div class="webform-values-set-value-b-field-select">',
      '#suffix' => '</div>',
      '#after_build' => array('_webform_values_set_set_none'),
    );

    $form['webform_values_set_edit']['is_secure'] = array(
      '#type' => 'select',
      "#title" => t("Is secure?"),
      '#options' => array(0 => t('No'), 1 => t('Yes')),
      '#default_value' => $itemValues['is_secure'],
      '#prefix' => '<div class="webform-values-set-is-secure-select">',
      '#suffix' => '</div>',
    );

    if (!empty($itemValues['form_applied_id'])) {
        $form['webform_values_set_edit']['trigger_field']['#options'] = $webformsFields[$itemValues['form_applied_id']];
        $form['webform_values_set_edit']['trigger_field']['#default_value'] = $itemValues['trigger_field'];
        $form['webform_values_set_edit']['value_a_field']['#options'] = $webformsFields[$itemValues['form_applied_id']];
        $form['webform_values_set_edit']['value_a_field']['#default_value'] = $itemValues['value_a_field'];
        $form['webform_values_set_edit']['value_b_field']['#options'] = $webformsFields[$itemValues['form_applied_id']];
        $form['webform_values_set_edit']['value_b_field']['#default_value'] = $itemValues['value_b_field'];
    }
    
    $form['webform_values_set_edit']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#weight' => 1,
    );
    
    $form['webform_values_set_edit']['cancel'] = array(
        '#type' => 'markup',
        '#markup' => '<a href="/' . WEBFORM_VALUES_SET_MENU_PATH . '">cancel</a>',
        '#weight' => 2,
    );
    
    drupal_add_js('var webforms_fields = ' . json_encode($webformsFields) . ';', 'inline');
    
  } else {
      $form['webform_values_set_edit']['error'] = array(
        '#type' => 'markup',
        '#markup' => t('Cannot find any Webform in the system.'),
        '#suffix' => '<br>' . l(t('cancel'), '/' . WEBFORM_VALUES_SET_MENU_PATH),
      );
  }
  


  $form['#validate'] = array('webform_values_set_edit_form_validate');
  $form['#submit'] = array('webform_values_set_edit_form_submit');

  return $form;
}

/**
 * Helper function for removing default empty Select element.
 */
function _webform_values_set_set_none($element, &$form_state) {
    $element['#options'][''] = t('-- none --');
    return $element;
}

/**
 * Helper function for removing default empty Select element.
 */
function _webform_values_set_remove_empty_select($element, &$form_state) {
    unset($element['#options']['']);
    return $element;
}

/**
 * Validate the Webform Values Set form.
 */
function webform_values_set_edit_form_validate($form, &$form_state) {
}

/**
 * Webform Values Set form process.
 */
function webform_values_set_edit_form_submit($form, &$form_state) {
  webform_values_set_include('webform_values_set');
  $item = array(
      'name' => $form_state['values']['name'],
      'form_applied_id' => $form_state['values']['form_applied_id'],
      'trigger_field' => $form_state['values']['trigger_field'],
      'value_a_field' => $form_state['values']['value_a_field'],
      'value_b_field' => $form_state['values']['value_b_field'],
      'is_secure' => $form_state['values']['is_secure'],
  );
  if (!empty($form_state['values']['id'])) {
      $item['id'] = $form_state['values']['id'];
  }
  $result = _webform_values_set_save($item);
  
  drupal_set_message(t('Webform Values Set has been saved.'), 'success');
  
  $form_state['redirect'] = WEBFORM_VALUES_SET_MENU_PATH;
}

/**
 * Webform Values Set delete page.
 */
function webform_values_set_delete_page($setId) {
    $out = array();
    $out[] = drupal_get_form('webform_values_set_delete_form', $setId);
    return $out;
}

/**
 * The webform values set delete confirmation form.
 */
function webform_values_set_delete_form($form, &$form_state, $id) {
  
    $form['webform_values_set_delete']['id'] = array(
        '#type' => 'hidden',
        '#value' =>  $id,
    );
    
    $form['#submit'] = array('webform_values_set_delete_form_submit');
    
    return confirm_form($form, 
        t('Are you sure you want to delete this Webform Values Set?'),
        '/' . WEBFORM_VALUES_SET_MENU_PATH,
        '', 
        t('Delete'), 
        t('Cancel'));
}

/**
 * Webform Values Set delete process.
 */
function webform_values_set_delete_form_submit($form, &$form_state) {
    webform_values_set_include('webform_values_set');
    _webform_values_set_delete($form_state['values']['id']);
    
    drupal_set_message(t('Webform Values Set has been deleted.'), 'success');
    
    $form_state['redirect'] = WEBFORM_VALUES_SET_MENU_PATH;
}

/**
 * Webform Values Set Pair edit page.
 */
function webform_values_set_pair_edit_page($setId, $pairId = null) {
    webform_values_set_include('webform_values_set_pairs');
    $item = null;
    if ($pairId) {
        $item = _webform_values_set_pairs_get_data($setId, $pairId);
    }
    $out = array();
    $out[] = drupal_get_form('webform_values_set_pair_edit_form', $setId, $item);
    return $out;
}

/**
 * Webform Values Set Pair form.
 */
function webform_values_set_pair_edit_form($form, &$form_state, $setId, $item = null) {
  $form = array();
  
  $fields = array('id', 'name', 'trigger_value', 'value_a', 'value_b');
  $itemValues = array();
  
  $form = array();
  if (!empty($form_state['input'])) {
      foreach ($fields as $field) {
          $itemValues[$field] = isset($form_state['input'][$field]) ? $form_state['input'][$field] : null;
      }
  } else {
      foreach ($fields as $field) {
          $itemValues[$field] = isset($item->{$field}) ? $item->{$field} : null;
      }
  }
  
  webform_values_set_include('webform_values_set');
  $setData = _webform_values_set_get_data($setId);
  
  $itemValues['webform_values_set_id'] = $setId;
  
  $form['webform_values_set_pair_edit'] = array(
    "#title" => t("Webform Values Set Pair"),
    "#collapsible" => FALSE,
    "#collapsed" => FALSE,
    "#tree" => FALSE,
  );
  
  if (!empty($itemValues['id'])) {
    $form['webform_values_set_pair_edit']['id'] = array(
      '#type' => 'hidden',
      '#default_value' => $itemValues['id'],
    );
  }
  
  $form['webform_values_set_pair_edit']['webform_values_set_id'] = array(
    '#type' => 'hidden',
    '#default_value' => $setId,
  );
  
  $form['webform_values_set_pair_edit']['name'] = array(
    '#type' => 'textfield',
    "#title" => t("Pair Name"),
    '#required' => true,
    '#default_value' => $itemValues['name'],
  );
  
  $form['webform_values_set_pair_edit']['trigger_value'] = array(
    '#type' => 'textfield',
    "#title" => t("Trigger Value"),
    '#required' => true,
    '#default_value' => $itemValues['trigger_value'],
  );
  
  $form['webform_values_set_pair_edit']['value_a'] = array(
    '#type' => 'textfield',
    "#title" => t("Value A"),
    '#required' => true,
    '#default_value' => $itemValues['value_a'],
  );
  
  if ($setData->value_b_field) {
    $form['webform_values_set_pair_edit']['value_b'] = array(
      '#type' => 'textfield',
      "#title" => t("Value B"),
      '#required' => true,
      '#default_value' => $itemValues['value_b'],
    );
  }
  
  $form['webform_values_set_pair_edit']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 1,
  );
  
  $form['webform_values_set_pair_edit']['cancel'] = array(
      '#type' => 'markup',
      '#markup' => '<a href="/' . WEBFORM_VALUES_SET_MENU_PATH . '/' . $setId . '/edit' . '">cancel</a>',
      '#weight' => 2,
  );

  $form['#validate'] = array('webform_values_set_pair_edit_form_validate');
  $form['#submit'] = array('webform_values_set_pair_edit_form_submit');

  return $form;
}

/**
 * Validate the Webform Values Set form.
 */
function webform_values_set_pair_edit_form_validate($form, &$form_state) {
}

/**
 * Webform Values Set Pair Edit process.
 */
function webform_values_set_pair_edit_form_submit($form, &$form_state) {
  webform_values_set_include('webform_values_set_pairs');
  $item = array(
      'webform_values_set_id' => $form_state['values']['webform_values_set_id'],
      'name' => $form_state['values']['name'],
      'trigger_value' => $form_state['values']['trigger_value'],
      'value_a' => $form_state['values']['value_a'],
      'value_b' => isset($form_state['values']['value_b']) ? $form_state['values']['value_b'] : null,
  );
  if (!empty($form_state['values']['id'])) {
      $item['id'] = $form_state['values']['id'];
  }
  $result = _webform_values_set_pairs_save($item);
  
  drupal_set_message(t('Webform Values Set Pair has been saved.'), 'success');
  
  $form_state['redirect'] = WEBFORM_VALUES_SET_MENU_PATH . '/' . (int)$form_state['values']['webform_values_set_id'] . '/edit';
}

/**
 * Webform Values Set Pair delete page.
 */
function webform_values_set_pair_delete_page($setId, $id) {
    $out = array();
    $out[] = drupal_get_form('webform_values_set_pair_delete_form', $setId, $id);
    return $out;
}

/**
 * Webform Values Set Pair delete confirmation form.
 */
function webform_values_set_pair_delete_form($form, &$form_state, $setId, $id) {
  
    $form['webform_values_set_pair_delete']['webform_values_set_id'] = array(
        '#type' => 'hidden',
        '#value' =>  $setId,
    );
    
    $form['webform_values_set_pair_delete']['id'] = array(
        '#type' => 'hidden',
        '#value' =>  $id,
    );
    
    $form['#submit'] = array('webform_values_set_pair_delete_form_submit');
    
    return confirm_form($form, 
        t('Are you sure you want to delete this Webform Values Set Pair?'),
        '/' . WEBFORM_VALUES_SET_MENU_PATH . '/' . $setId . '/edit',
        '', 
        t('Delete'), 
        t('Cancel'));
}

/**
 * Webform Values Set Pair delete process.
 */
function webform_values_set_pair_delete_form_submit($form, &$form_state) {
    webform_values_set_include('webform_values_set_pairs');
    _webform_values_set_pair_delete($form_state['values']['webform_values_set_id'], $form_state['values']['id']);
    
    drupal_set_message(t('Webform Values Set Pair has been deleted.'), 'success');
    
    $form_state['redirect'] = WEBFORM_VALUES_SET_MENU_PATH . '/' . $form_state['values']['webform_values_set_id'] . '/edit';
}

/**
 * Implementing hook_form_alter().
 */
function webform_values_set_form_alter(&$form, &$form_state, $form_id) {
    $form['#after_build'][] = 'webform_values_set_afterbuild';
}

/**
 * Custom callback executing when webform is build. It's needed for retrieving
 * rendered HTML fields attributes of the Webform and applying some JavaScript
 * code to the Webform page.
 */
function webform_values_set_afterbuild(&$form, $form_state) {
    //array_unshift($form['#submit'], 'webform_values_set_submit');
    $jQueryFormSelector = isset($form['#id']) ? 'form#' . $form['#id'] . ' ' : '';
    $webformId = isset($form['#node']->webform['nid']) ? $form['#node']->webform['nid'] : null;
    if (!$webformId) {
        return $form;
    }
    $data = _webform_values_set_get_sets_data($webformId, false);
    if (empty($data['sets'])) {
        return $form;
    }
    $dataJS = _webform_values_set_get_sets_js($data['sets'], $form['submitted']);
    drupal_add_js(drupal_get_path('module', 'webform_values_set') .'/webform_values_set.js');
    $jsMarkup = 'var webform_' . $webformId . '_values_sets = ' . json_encode($dataJS) . ';jQuery(function() {';
    $triggerFields = array_keys($dataJS);
    foreach ($triggerFields as $triggerField) {
        $jsMarkup .= 'jQuery("' . $jQueryFormSelector . '*[name=\'' . $triggerField . '\']").bind("change", function() { webform_values_set_trigger(webform_' . $webformId . '_values_sets, jQuery(this), \'' . $jQueryFormSelector . '\') } );';
    }
    $jsMarkup .= '});';
    
    drupal_add_js($jsMarkup, 'inline');
    
    return $form;
}

/**
 * Implementing of custom submit hook. It's used to keep the data valid also on
 * back-end side (when 'is_secure' flag of the Set is set to 1).
 */
//function webform_values_set_submit($form, &$form_state) {
function webform_values_set_webform_submission_presave($node, &$submission) {
    if ($node->type !== 'webform') {
        return false;
    }
    $webformId = isset($node->nid) ? $node->nid : null;
    if (!$webformId) {
        return false;
    }
    $data = _webform_values_set_get_sets_data($webformId, true);
    if (empty($data['sets'])) {
        return false;
    }
    
    foreach ($data['sets'] as $triggerField => $values) {
        foreach ($values['pairs'] as $triggerValue => $pairs) {
            $ff = _webform_values_set_get_field($node->webform, $submission->data, $triggerField);
            if ($ff != $triggerValue) {
                continue;
            }
            if ($ff != $triggerValue) {
                continue;
            }
            foreach ($pairs as $pair) {
                foreach ($pair as $field => $value) {
                    $field = _webform_values_set_get_field($node->webform, $submission->data, $field, true);
                    _webform_values_set_set_webform_field_value_submit($submission->data, $field, $value);
                }
            }
        }
    }
}

function _webform_values_set_get_field($data, $submission, $field, $returnKey = false) {
    foreach ($data['components'] as $key => $component) {
        if ($component['form_key'] === $field) {
            if ($returnKey) {
                return $key;
            }
            return array_shift($submission[$key]);
        }
    }
    return null;
}

/**
 * Prepare the back-end Sets data for given $webformId.
 * 
 * @return array
 */
function _webform_values_set_get_sets_data($webformId, $isSecure = false) {
    webform_values_set_include('webform_values_set', 'webform_values_set_pairs');
    $sets = _webform_values_set_get_data_by_form($webformId, $isSecure);
    $data = array();

    foreach ($sets as $set) {
        $pairs = _webform_values_set_pairs_get_data($set->id);
        foreach ($pairs as $pair) {
            $setPair = array(
                $set->value_a_field => $pair->value_a,
            );
            if (!empty($set->value_b_field)) {
                $setPair[$set->value_b_field] = $pair->value_b;
            }
            $data[$set->trigger_field]['pairs'][$pair->trigger_value][] = $setPair;
        }
        $data[$set->trigger_field]['is_secure'] = $set->is_secure;
    }

    return array('sets' => $data);
}

/**
 * Prepare the front-end Sets data for given $webformId.
 * 
 * @return array
 */
function _webform_values_set_get_sets_js($sets, $formSubmitted) {
    $data = array();
    $byKey = '#name';
    foreach ($sets as $setKey => $setValue) {
        foreach ($setValue['pairs'] as $pairValue => $pairsData) {
            $setPairJS = array();
            foreach ($pairsData as $pairData) {
                foreach ($pairData as $field => $value) {
                    $ff = _webform_values_set_find_webform_field($formSubmitted, $field);
                    if (isset($ff[$byKey])) {
                        $setPairJS[$ff[$byKey]] = $value;
                    }
                }
            }
            if (!empty($setPairJS)) {
                $ff = _webform_values_set_find_webform_field($formSubmitted, $setKey);
                if (isset($ff[$byKey])) {
                    $data[$ff[$byKey]]['pairs'][$pairValue][] = $setPairJS;
                }
            }
        }
        $data[$ff[$byKey]]['is_secure'] = (bool)$setValue['is_secure'];
    }
    return $data;
}

function _webform_values_set_find_webform_field($array, $key) {
    if (isset($array[$key])) {
        return $array[$key];
    }
    foreach ($array as $field) {
        if (!empty($field['#type']) && $field['#type'] === 'fieldset') {
            return _webform_values_set_find_webform_field($field, $key);
        }
    }
    return null;
}

function _webform_values_set_find_webform_trigger_field_submit($array, $key) {
    if (isset($array[$key])) {
        return $array[$key];
    }
    $result = null;
    foreach ($array as $field) {
        $result = _webform_values_set_find_webform_trigger_field_submit($field, $key);
        if ($result) {
            break;
        }
    }
    return $result;
}

function _webform_values_set_set_webform_field_value_submit(&$array, $key, $value) {
    if (!is_array($array)) {
        return false;
    }
    if (isset($array[$key])) {
        $array[$key] = array($value);
        return true;
    }
    $result = false;
    foreach ($array as &$field) {
        $result = _webform_values_set_set_webform_field_value_submit($field, $key, $value);
        if ($result) {
            break;
        }
    }
    return $result;
}
